1  import os
 2  import asyncio
 3  # import sys  <-- –≠–¢–û –£–ñ–ï –ù–ï –ù–£–ñ–ù–û, –¢–ê–ö –ö–ê–ö –ú–´ –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú WEBHOOK
 4  # from dotenv import load_dotenv  <-- –≠–¢–ê –°–¢–†–û–ö–ê –£–î–ê–õ–ï–ù–ê
 5  from aiogram import Bot, Dispatcher, types, F
 6  from aiogram.filters import Command 
 7  from deep_translator import GoogleTranslator 
 8  from google import genai
 9  from google.genai.errors import APIError
10  from google.genai.types import HarmCategory as HCategory, SafetySetting, HarmBlockThreshold 
11  from google.genai.errors import APIError
12  
13  # ==================================
14  # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 
15  # ==================================
16  
17  # load_dotenv()  <-- –≠–¢–ê –°–¢–†–û–ö–ê –£–î–ê–õ–ï–ù–ê
18  
19  # –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—ç—Ç–∏ –∫–ª—é—á–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã Render!)
20  BOT_TOKEN = os.getenv("BOT_TOKEN") 
21  GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
22  
23  if not BOT_TOKEN or not GEMINI_API_KEY:
24      # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
25      print("‚ùå –ö–ª—é—á–∏ BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
26  
27  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
28  bot = Bot(token=BOT_TOKEN)
29  dp = Dispatcher()
30  
31  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è deep-translator
32  translator = GoogleTranslator(source='auto', target='en')
33  
34  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤
35  languages = {
36      "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
37      "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß": "en",
38      "–£–∑–±–µ–∫—Å–∫–∏–π üá∫üáø": "uz"
39  }
40  
41  user_lang = {}
42  
43  # –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (–¥–ª—è Gemini)
44  SAFETY_SETTINGS = [
45      SafetySetting(
46          category=category,
47          threshold=HarmBlockThreshold.BLOCK_NONE,
48      )
49      for category in [
50          HCategory.HARM_CATEGORY_HARASSMENT,
51          HCategory.HARM_CATEGORY_HATE_SPEECH,
52          HCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
53          HCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
54      ]
55  ]
56  
57  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Gemini
58  try:
59      gemini_client = genai.Client(api_key=GEMINI_API_KEY)
60  except Exception as e:
61      print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
62  
63  
64  # ==================================
65  # 2. –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Gemini
66  # ==================================
67  
68  async def get_gemini_response(prompt: str):
69      """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫—É."""
70      try:
71          response = gemini_client.models.generate_content(
72              model='gemini-2.5-flash',
73              contents=prompt,
74              config=genai.types.GenerateContentConfig(
75                  temperature=0.4,
76                  max_output_tokens=400,
77                  safety_settings=SAFETY_SETTINGS
78              )
79          )
80          if response and response.text:
81              return response.text.strip()
82          return "‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç."
83      except APIError as e:
84          return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò (API Gemini): {e}"
85      except Exception as e:
86          return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò: {e}"
87  
88  
89  # ==================================
90  # 3. –•–µ–Ω–¥–ª–µ—Ä—ã (–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
91  # ==================================
92  
93  @dp.message(Command('start'))
94  async def start(message: types.Message):
95      button_list = [types.KeyboardButton(text=lang_name) for lang_name in languages.keys()]
96      
97      keyboard = types.ReplyKeyboardMarkup(
98          keyboard=[button_list], 
99          resize_keyboard=True,
100         one_time_keyboard=True
101     )
102     
103     await message.answer(
104         "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ –ø–æ–º–æ—â–Ω–∏–∫.\n"
105         "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å:",
106         reply_markup=keyboard
107     )
108 
109 @dp.message(F.text.in_(languages.keys()))
110 async def set_language(message: types.Message):
111     user_lang[message.from_user.id] = languages[message.text]
112     await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ {message.text}.\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.",
113                          reply_markup=types.ReplyKeyboardRemove())
114 
115 @dp.message(F.text)
116 async def handle_text(message: types.Message):
117     target_lang_code = user_lang.get(message.from_user.id, "en")
118     source_text = message.text
119 
120     # --- –®–∞–≥ 1: –ü–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é deep-translator ---
121     translation = ""
122     try:
123         translator.target = target_lang_code 
124         translation = await asyncio.to_thread(translator.translate, source_text)
125         if not translation:
126              translation = source_text
127     except Exception as e:
128         await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
129         return
130 
131     # --- –®–∞–≥ 2: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini (–û–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π) ---
132     gemini_output_lang = "en"
133     ai_text = ""
134     ai_text_en = ""
135     
136     # 1. Gemini –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
137     prompt_en = (
138         f"–û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ—Ä–∞–∑—ã: '{translation}'. "
139         f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –ê–ù–ì–õ–ò–ô–°–ö–û–ú —è–∑—ã–∫–µ –∏ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
140     )
141     ai_text_en = await get_gemini_response(prompt_en)
142     
143     # 2. –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ Gemini –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫
144     if ai_text_en and not ai_text_en.startswith("‚ö†Ô∏è"):
145         if target_lang_code != gemini_output_lang:
146             try:
147                 translator.source = gemini_output_lang
148                 translator.target = target_lang_code
149                 ai_text = await asyncio.to_thread(translator.translate, ai_text_en)
150             except Exception as e:
151                 ai_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}"
152         else:
153             ai_text = ai_text_en
154     else:
155         ai_text = ai_text_en # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
156 
157     # --- –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°–∏–Ω–æ–Ω–∏–º—ã" ---
158     
159     # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –ü–ï–†–í–û–ï –°–õ–û–í–û –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è callback_data (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
160     first_word = translation.split()[0][:20] 
161     synonym_callback_data = f"SYNONYM_{target_lang_code}_{first_word}"
162     
163     inline_keyboard = types.InlineKeyboardMarkup(
164         inline_keyboard=[
165             [
166                 types.InlineKeyboardButton(text="üîé –°–∏–Ω–æ–Ω–∏–º—ã", callback_data=synonym_callback_data)
167             ]
168         ]
169     )
170 
171     await message.answer(
172         f"üåç <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n{translation}\n\nü§ñ <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç Gemini:</b>\n{ai_text}",
173         parse_mode="HTML",
174         reply_markup=inline_keyboard
175     )
176 
177 
178 # ==================================
179 # 4. –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–°–∏–Ω–æ–Ω–∏–º—ã"
180 # ==================================
181 
182 @dp.callback_query(F.data.startswith("SYNONYM_"))
183 async def handle_synonym_request(callback_query: types.CallbackQuery):
184     # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ: SYNONYM_[lang_code]_[word]
185     _, lang_code, word = callback_query.data.split('_')
186     
187     # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
188     await bot.edit_message_reply_markup(
189         chat_id=callback_query.message.chat.id,
190         message_id=callback_query.message.message_id,
191         reply_markup=None
192     )
193 
194     await callback_query.answer("–ò—â–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã...")
195 
196     synonyms_text = ""
197     
198     # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
199 
200     if lang_code == "uz":
201         # –£–∑–±–µ–∫—Å–∫–∏–π (uz): –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ (–ê–Ω–≥–ª -> –£–∑–±–µ–∫) –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
202         prompt_synonym_en = (
203             f"Provide 5-7 synonyms for the word '{word}' and list them. The response must be a simple, clean, unnumbered list in ENGLISH."
204         )
205         synonyms_en = await get_gemini_response(prompt_synonym_en)
206 
207         if synonyms_en.startswith("‚ö†Ô∏è"):
208             synonyms_text = synonyms_en
209         elif not synonyms_en or len(synonyms_en) < 5:
210             synonyms_text = f"‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Å–ª–æ–≤–∞ \"{word}\"."
211         else:
212             try:
213                 # –ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π
214                 translator.source = "en"
215                 translator.target = lang_code
216                 synonyms_text = await asyncio.to_thread(translator.translate, synonyms_en)
217             except Exception:
218                 synonyms_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –Ω–∞ {lang_code}. –í–æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª:\n{synonyms_en}"
219             
220     else:
221         # –†—É—Å—Å–∫–∏–π (ru) –∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (en): –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ
222         
223         prompt_synonym_direct = (
224             f"Provide 5-7 synonyms or alternative phrases for the word '{word}' in the language with code '{lang_code}' and list them in a simple, unnumbered format."
225             f"Do not add extra explanations, only the list."
226         )
227         synonyms_text = await get_gemini_response(prompt_synonym_direct)
228         
229         if synonyms_text.startswith("‚ö†Ô∏è"):
230              pass # –û—à–∏–±–∫–∞ —É–∂–µ –≤ —Ç–µ–∫—Å—Ç–µ
231         elif not synonyms_text or len(synonyms_text) < 5:
232              # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç
233              synonyms_text = f"‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Å–ª–æ–≤–∞ \"{word}\"."
234 
235 
236     # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
237     await bot.send_message(
238         callback_query.message.chat.id,
239         f"üìö <b>–°–∏–Ω–æ–Ω–∏–º—ã/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è \"{word}\":</b>\n\n{synonyms_text}",
240         parse_mode="HTML"
241     )
242 
243     await callback_query.answer()
244 
245 
246 # ==================================
247 # 5. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (aiogram 3.x)
248 # ==================================
249 async def main():
250     print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
251     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
252     if BOT_TOKEN and GEMINI_API_KEY:
253         await dp.start_polling(bot, skip_updates=True)
254     else:
255         print("–ö–ª—é—á–∏ API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
256 
257 
258 if __name__ == "__main__":
259     try:
260         asyncio.run(main())
261     except KeyboardInterrupt:
262         print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
263     except Exception as e:
264         print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")